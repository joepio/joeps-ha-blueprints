blueprint:
  name: Motion Light Control (ZHA)
  description: |
    Controls lights using a motion sensor connected via ZHA.
    - Turns on lights when occupancy detected and off when unoccupied
    - Uses different brightness settings for day and night (based on sun)
    - Can be disabled by media player state or input boolean
    - Configurable transition times for smooth lighting effects
  domain: automation
  input:
    occupancy_entity:
      name: Occupancy Sensor
      description: "The occupancy sensor to use"
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy

    illuminance_entity:
      name: Illuminance
      description: "The luminance sensor to use"
      selector:
        entity:
          domain: sensor
          device_class: illuminance

    luminance_value:
      name: Light trigger level
      description: "Anything darker than this will turn on the light"
      default: 6
      selector:
        number:
          min: 2
          max: 3000
          mode: box
          unit_of_measurement: "lx"

    light_entity:
      name: Lights
      description: The light(s) to control
      selector:
        entity:
          domain: light

    daytime_brightness:
      name: Daytime Brightness
      description: "The brightness to set during the day (100%)"
      default: 75
      selector:
        number:
          min: 10
          max: 100
          mode: box
          unit_of_measurement: "%"

    nighttime_brightness:
      name: Nighttime Brightness
      description: "The brightness to set at night (100%)"
      default: 10
      selector:
        number:
          min: 10
          max: 100
          mode: box
          unit_of_measurement: "%"

    daytime_colour:
      name: Daytime colour temperature
      description: "The colour temperature during the day (4500K)"
      default: 4500
      selector:
        number:
          min: 2200
          max: 6500
          step: 100
          mode: box
          unit_of_measurement: "Kelvin"

    nighttime_colour:
      name: Nighttime colour temperature
      description: "The colour temperature during the night (3000K)"
      default: 3000
      selector:
        number:
          min: 2200
          max: 6500
          step: 100
          mode: box
          unit_of_measurement: "Kelvin"

    transition:
      name: Light transition time
      description: "Time in seconds for light transitions"
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 1
          unit_of_measurement: "seconds"

    disable_entity:
      name: Input Boolean to use for disabling sensor
      description: >
        Set to an input_boolean. If the input_boolean is in the 'on' state
        then the occupancy sensor will be disabled
      default: {}
      selector:
        target:
          entity:
            domain: input_boolean

    media_entity:
      name: If this media player is on than disable occupancy sensor
      description: >
        Set to a media_player e.g. TV. If the media player is in the 'on' state
        then the occupancy sensor will be disabled
      default: {}
      selector:
        target:
          entity:
            domain: media_player

variables:
  disable_entity: !input disable_entity
  media_entity: !input media_entity

mode: single

trigger:
  - platform: state
    entity_id: !input occupancy_entity

condition:
  - condition: template
    value_template: "{{ True if not disable_entity else is_state(disable_entity.entity_id, 'off') }}"
  - condition: template
    value_template: "{{ True if not media_entity else is_state(media_entity.entity_id, 'off') }}"

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'state' and trigger.to_state.state == 'on' }}"
          - condition: numeric_state
            entity_id: !input illuminance_entity
            below: !input luminance_value
        sequence:
          - choose:
              - conditions:
                  - condition: sun
                    after: sunset
                    before: sunrise
                sequence:
                  - target:
                      entity_id: !input light_entity
                    data:
                      brightness_pct: !input nighttime_brightness
                      kelvin: !input nighttime_colour
                      transition: !input transition
                    service: light.turn_on
            default:
              - target:
                  entity_id: !input light_entity
                data:
                  brightness_pct: !input daytime_brightness
                  kelvin: !input daytime_colour
                  transition: !input transition
                service: light.turn_on

      - conditions:
          - condition: template
            value_template: "{{ trigger.platform == 'state' and trigger.to_state.state == 'off' }}"
        sequence:
          - target:
              entity_id: !input light_entity
            data:
              transition: !input transition
            service: light.turn_off
