blueprint:
  name: "Control Lights with Tuya Smart Knob (ERS-10TZBVK-AA) - Cleaned"
  description: >
    This blueprint configures the **Tuya ERS-10TZBVK-AA Smart Knob** to control a light entity in Home Assistant via **Zigbee2MQTT**.

    It uses the MQTT topic directly for fast response in dimming and color temperature adjustments.

    **Important Note:** The device must be in **COMMAND** mode for automation to work. This blueprint automatically checks and sets COMMAND mode. (To switch modes manually, do a triple button press.)

    **Actions:**
    - Button press toggles the light.
    - Rotating left/right adjusts brightness.
    - Press and hold then rotate adjusts color temperature.

    **Features:**
    - Auto-enforces COMMAND mode.
    - Adjustable brightness limits (expressed in percent but converted to a 0–255 scale).
    - Configurable minimum and maximum color temperatures (in Kelvin).
    - Adjustable step multiplier for fine-tuning color temperature changes.
    
    Forked from the community blueprint.
  source_url: https://raw.githubusercontent.com/TriggrHappy/blueprint_tuya_smart_knob/refs/heads/main/blueprint.yaml
  domain: automation
  input:
    mqtt_topic:
      name: MQTT Topic
      description: "The parent MQTT topic for the smart knob (e.g. 'zigbee2mqtt/Tuya Smart Knob'). Typically, the last part is the device name."
      selector:
        text: {}
    light_entity:
      name: Light Entity
      description: "The light to be controlled."
      selector:
        entity:
          filter:
            domain: light
    step_multiplier:
      name: Step Multiplier
      description: "Multiplier for color temperature changes (1 = slow; 10 = fast)."
      default: 5
      selector:
        number:
          min: 1
          max: 10
          mode: slider
    kelvin_min:
      name: Minimum Color Temperature (Kelvin)
      description: "The minimum color temperature (default 2000K)."
      default: 2000
      selector:
        number:
          min: 1000
          max: 6500
    kelvin_max:
      name: Maximum Color Temperature (Kelvin)
      description: "The maximum color temperature (default 6500K)."
      default: 6500
      selector:
        number:
          min: 1000
          max: 6500
    min_brightness:
      name: Minimum Brightness (%)
      description: "Minimum brightness percentage. Set above 0 to prevent turning off the light. (Default 1)"
      default: 1
      selector:
        number:
          min: 0
          max: 100
    max_brightness:
      name: Maximum Brightness (%)
      description: "Maximum brightness percentage. (Default 100)"
      default: 100
      selector:
        number:
          min: 0
          max: 100
    light_transition:
      name: Light Transition (seconds)
      description: "Transition duration. Set 0 to disable transition. (Default 0.2)"
      default: 0.2
      selector:
        number:
          min: 0.0
          max: 4.0
          step: 0.1
          unit_of_measurement: seconds
    automation_mode:
      name: Automation Mode
      description: "Select the automation mode (see https://www.home-assistant.io/docs/automation/modes/)."
      default: single
      selector:
        select:
          options:
            - single
            - restart
            - queued
            - parallel

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

condition: []

action:
  - variables:
      command: "{{ trigger.payload_json.action }}"
      step_size: "{{ trigger.payload_json.action_step_size }}"
      step_percent: >-
        {% if step_size is number %}
          {{ (step_size / 2) | int }}
        {% else %}
          0
        {% endif %}
      step_multiplier: !input step_multiplier
      kelvin_min: !input kelvin_min
      kelvin_max: !input kelvin_max
      min_brightness: !input min_brightness
      max_brightness: !input max_brightness
      light_transition: !input light_transition
      mqtt_topic: !input mqtt_topic
      light_entity: !input light_entity

  - choose:
      # Ensure device is in COMMAND mode for these actions.
      - conditions:
          - condition: template
            value_template: >
              {{ command in ['single', 'double', 'rotate_left', 'rotate_right', 'hold'] }}
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ mqtt_topic }}/set"
              payload: '{"operation_mode": "command"}'

      # Toggle light on button press.
      - conditions:
          - condition: template
            value_template: "{{ command == 'toggle' }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: !input light_entity

      # Increase brightness.
      - conditions:
          - condition: template
            value_template: "{{ command == 'brightness_step_up' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              brightness: >-
                {# Get the current brightness (default to 0) and calculate the increase #}
                {% set current = state_attr(light_entity, 'brightness') | default(0) | int %}
                {% set increase = step_percent * 255 / 100 %}
                {% set new_value = current + increase %}
                {# Convert the user-specified maximum (in percent) to the 0–255 scale #}
                {% set max_val = (max_brightness | default(100) | int) * 255 / 100 %}
                {{ [new_value, max_val] | min | int }}
              transition: !input light_transition

      # Decrease brightness.
      - conditions:
          - condition: template
            value_template: "{{ command == 'brightness_step_down' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              brightness: >-
                {% set current = state_attr(light_entity, 'brightness') | default(0) | int %}
                {% set decrease = step_percent * 255 / 100 %}
                {% set new_value = current - decrease %}
                {# Convert the user-specified minimum (in percent) to the 0–255 scale #}
                {% set min_val = (min_brightness | int) * 255 / 100 %}
                {{ [new_value, min_val] | max | int }}
              transition: !input light_transition

      # Increase color temperature.
      - conditions:
          - condition: template
            value_template: "{{ command == 'color_temperature_step_up' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              kelvin: >-
                {% set current = state_attr(light_entity, 'color_temp_kelvin') %}
                {% if current is not none %}
                  {% set new_temp = current + (step_percent * step_multiplier) %}
                  {{ [new_temp, (kelvin_max | int)] | min | int }}
                {% else %}
                  2800
                {% endif %}
              transition: !input light_transition

      # Decrease color temperature.
      - conditions:
          - condition: template
            value_template: "{{ command == 'color_temperature_step_down' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              kelvin: >-
                {% set current = state_attr(light_entity, 'color_temp_kelvin') %}
                {% if current is not none %}
                  {% set new_temp = current - (step_percent * step_multiplier) %}
                  {{ [new_temp, (kelvin_min | int)] | max | int }}
                {% else %}
                  2800
                {% endif %}
              transition: !input light_transition

mode: !input automation_mode
max_exceeded: silent
