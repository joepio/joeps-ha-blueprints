blueprint:
  name: Hue-Style Motion Lighting (generic)
  description: |
    Smooth “Philips-Hue-like” motion lighting for *any* binary_sensor (occupancy or motion)
    and *any* light entities, without requiring Zigbee2MQTT-specific commands.

    • Multiple sensors can drive the same lights
    • Multiple lights supported (individual entities or light groups)
    • Separate day-time and night-time brightness / colour temperature
    • Fade-in / fade-out transitions
    • Optional ambient-light threshold, manual disable switch, and media-player override
    • Lights turn off only after **all** sensors have been clear for the chosen delay

  domain: automation
  input:
    occupancy_sensors:
      name: Occupancy / Motion Sensors
      description: "Select one or more binary_sensors with device_class occupancy *or* motion"
      selector:
        target:
          entity:
            domain: binary_sensor
    light_targets:
      name: Lights
      description: "One or more lights or light groups to control"
      selector:
        target:
          entity:
            domain: light

    off_delay:
      name: Off-delay (seconds)
      description: "How long after ALL sensors are clear before lights fade out"
      default: 180
      selector:
        number:
          min: 0
          max: 1800
          mode: box
          unit_of_measurement: "s"

    illuminance_entity:
      name: (Optional) Illuminance sensor
      description: "Skip if you don’t want a lux check"
      default: {}
      selector:
        entity:
          domain: sensor
          device_class: illuminance
          multiple: false

    illuminance_max:
      name: Lux threshold
      description: "Only turn lights on when ambient lux is below this value"
      default: 6
      selector:
        number:
          min: 1
          max: 3000
          mode: box
          unit_of_measurement: "lx"

    day_brightness:
      name: Day brightness (%)
      default: 75
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    night_brightness:
      name: Night brightness (%)
      default: 10
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    day_kelvin:
      name: Day colour temperature (K)
      default: 4500
      selector:
        number:
          min: 1500
          max: 6500
          step: 100
          unit_of_measurement: "K"

    night_kelvin:
      name: Night colour temperature (K)
      default: 3000
      selector:
        number:
          min: 1500
          max: 6500
          step: 100
          unit_of_measurement: "K"

    night_start:
      name: Night-mode starts at
      default: "22:00:00"
      selector:
        time:

    night_end:
      name: Night-mode ends at
      default: "07:00:00"
      selector:
        time:

    fade_in_time:
      name: Fade-in (s)
      default: 1.5
      selector:
        number:
          min: 0
          max: 15
          step: 0.5
          unit_of_measurement: "s"

    fade_out_time:
      name: Fade-out (s)
      default: 3
      selector:
        number:
          min: 0
          max: 15
          step: 0.5
          unit_of_measurement: "s"

    disable_switch:
      name: (Optional) Manual disable switch
      default: {}
      selector:
        entity:
          domain: input_boolean

    media_player_block:
      name: (Optional) Disable when media-player is playing
      default: {}
      selector:
        entity:
          domain: media_player

variables:
  sensors: !input occupancy_sensors
  lights: !input light_targets
  disable_sw: !input disable_switch
  media_ent: !input media_player_block
  lux_ent: !input illuminance_entity
  lux_max: !input illuminance_max
  off_delay: !input off_delay

mode: restart
max_exceeded: silent

trigger:
  # Any change on **any** chosen sensor
  - platform: state
    entity_id: !input occupancy_sensors

condition:
  # 1) Optional manual disable
  - condition: template
    value_template: >
      {{ not disable_sw
         or is_state(disable_sw, 'off') }}

  # 2) Optional media-player override
  - condition: template
    value_template: >
      {{ not media_ent
         or is_state(media_ent, 'off')
         or is_state(media_ent, 'idle')
         or is_state(media_ent, 'standby') }}

action:
  - choose:
      # ───────────── TURN-ON branch ─────────────
      - conditions: "{{ trigger.to_state.state == 'on' }}"
        sequence:
          # Optional lux gate
          - condition: template
            value_template: >
              {{ not lux_ent
                 or (states(lux_ent) | float(9999)) < lux_max }}

          # Decide whether we’re in night or day window
          - variables:
              night_mode: >
                {% set now = now().time() %}
                {% set start = strptime(night_start, '%H:%M:%S').time() %}
                {% set end = strptime(night_end, '%H:%M:%S').time() %}
                {% if start < end %}
                  {{ start <= now < end }}
                {% else %}
                  {{ now >= start or now < end }}
                {% endif %}
          - service: light.turn_on
            target: "{{ lights }}"
            data:
              transition: !input fade_in_time
              brightness_pct: "{{ night_brightness if night_mode else day_brightness }}"
              kelvin: "{{ night_kelvin if night_mode else day_kelvin }}"

      # ───────────── TURN-OFF branch ────────────
      - conditions: "{{ trigger.to_state.state == 'off' }}"
        sequence:
          # Wait until *all* sensors are clear for the off-delay
          - wait_template: >
              {{ expand(sensors) | selectattr('state','eq','on') | list | length == 0 }}
            timeout: "{{ off_delay | int }}"
            continue_on_timeout: false

          - service: light.turn_off
            target: "{{ lights }}"
            data:
              transition: !input fade_out_time
